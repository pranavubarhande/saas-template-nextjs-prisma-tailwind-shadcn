// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedTeams      Team[]        @relation("TeamOwner")
  teamMemberships TeamMember[]
  subscriptions   Subscription[]
  invoices        Invoice[]

  @@map("users")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     TeamMember[]
  subscriptions Subscription[]
  invites     TeamInvite[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  userId   String
  teamId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model TeamInvite {
  id        String   @id @default(cuid())
  email     String
  role      TeamRole @default(MEMBER)
  token     String   @unique
  teamId    String
  invitedBy String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_invites")
}

model Subscription {
  id                    String              @id @default(cuid())
  userId                String?
  teamId                String?
  stripeSubscriptionId  String              @unique
  stripeCustomerId      String?
  status                SubscriptionStatus  @default(INACTIVE)
  plan                  Plan                @default(FREE)
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?
  cancelAtPeriodEnd     Boolean             @default(false)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  team     Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)
  invoices Invoice[]

  @@map("subscriptions")
}

model Invoice {
  id                String   @id @default(cuid())
  userId            String
  subscriptionId    String?
  stripeInvoiceId   String?  @unique
  amount            Int      // Amount in cents
  currency          String   @default("usd")
  status            String
  invoicePdf        String?
  hostedInvoiceUrl  String?
  createdAt         DateTime @default(now())

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription?  @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@map("invoices")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  TRIALING
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}
